# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

interface Node {
    id: ID!
}

interface NodeConnection {
    edges: [NodeConnectionEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

interface NodeConnectionEdge {
    next: Node
    node: Node
    previous: Node
}

type Cv implements Node {
    at: String
    belongsTo(
        filter: BelongsToFilterInput,
        limit: Int,
        order: SortOrder = DESC,
        page: Int,
        #Defaults to 25 when page is provided.
        perPage: Int,
        skip: Int = 0,
        sort: [SortArgument!],
        sortBy: String = "date"
    ): NodeBelongsTo
    content: String
    excerpt: String
    fileInfo: Cv_FileInfo
    headings(depth: RemarkHeadingLevels, stripTags: Boolean = true): [RemarkHeading]
    id: ID!
    order: Int
    path(to: String = "default"): String
    tags: [String]
    timeToRead(
        #Words per minute
        speed: Int = 230
    ): Int
    title: String
    when: String
}

type CvConnection implements NodeConnection {
    edges: [CvEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type CvEdge implements NodeConnectionEdge {
    next: Cv
    node: Cv
    previous: Cv
}

type Cv_FileInfo {
    directory: String
    extension: String
    name: String
    path: String
}

type Metadata {
    pathPrefix: String
    siteDescription: String
    siteName: String
    siteUrl: String
}

type NodeBelongsTo implements NodeConnection {
    edges: [NodeBelongsToEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type NodeBelongsToEdge implements NodeConnectionEdge {
    next: Node
    node: Node
    previous: Node
}

type Page {
    context: JSON!
    path: String!
}

type PageInfo {
    currentPage: Int!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    isFirst: Boolean!
    isLast: Boolean!
    perPage: Int!
    totalItems: Int!
    totalPages: Int!
}

type Post implements Node {
    belongsTo(
        filter: BelongsToFilterInput,
        limit: Int,
        order: SortOrder = DESC,
        page: Int,
        #Defaults to 25 when page is provided.
        perPage: Int,
        skip: Int = 0,
        sort: [SortArgument!],
        sortBy: String = "date"
    ): NodeBelongsTo
    content: String
    date(
        #Date format
        format: String,
        #Locale
        locale: String
    ): Date
    description: String
    excerpt: String
    fileInfo: Post_FileInfo
    headings(depth: RemarkHeadingLevels, stripTags: Boolean = true): [RemarkHeading]
    id: ID!
    path(to: String = "default"): String
    slug: String
    timeToRead(
        #Words per minute
        speed: Int = 230
    ): Int
    title: String
    twitter: String
}

type PostConnection implements NodeConnection {
    edges: [PostEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type PostEdge implements NodeConnectionEdge {
    next: Post
    node: Post
    previous: Post
}

type Post_FileInfo {
    directory: String
    extension: String
    name: String
    path: String
}

type Publication implements Node {
    belongsTo(
        filter: BelongsToFilterInput,
        limit: Int,
        order: SortOrder = DESC,
        page: Int,
        #Defaults to 25 when page is provided.
        perPage: Int,
        skip: Int = 0,
        sort: [SortArgument!],
        sortBy: String = "date"
    ): NodeBelongsTo
    content: String
    date(
        #Date format
        format: String,
        #Locale
        locale: String
    ): Date
    description: String
    displayDate: String
    excerpt: String
    fileInfo: Publication_FileInfo
    headings(depth: RemarkHeadingLevels, stripTags: Boolean = true): [RemarkHeading]
    id: ID!
    path(to: String = "default"): String
    timeToRead(
        #Words per minute
        speed: Int = 230
    ): Int
    title: String
    url: String
}

type PublicationConnection implements NodeConnection {
    edges: [PublicationEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type PublicationEdge implements NodeConnectionEdge {
    next: Publication
    node: Publication
    previous: Publication
}

type Publication_FileInfo {
    directory: String
    extension: String
    name: String
    path: String
}

type Query {
    allCv(
        #Filter for Cv nodes.
        filter: CvFilterInput,
        limit: Int,
        order: SortOrder = DESC,
        page: Int,
        #Defaults to 25 when page is provided.
        perPage: Int,
        skip: Int = 0,
        sort: [SortArgument],
        sortBy: String = "date"
    ): CvConnection
    allPage(
        #Filter pages.
        filter: PageFilterInput
    ): [Page]
    allPost(
        #Filter for Post nodes.
        filter: PostFilterInput,
        limit: Int,
        order: SortOrder = DESC,
        page: Int,
        #Defaults to 25 when page is provided.
        perPage: Int,
        skip: Int = 0,
        sort: [SortArgument],
        sortBy: String = "date"
    ): PostConnection
    allPublication(
        #Filter for Publication nodes.
        filter: PublicationFilterInput,
        limit: Int,
        order: SortOrder = DESC,
        page: Int,
        #Defaults to 25 when page is provided.
        perPage: Int,
        skip: Int = 0,
        sort: [SortArgument],
        sortBy: String = "date"
    ): PublicationConnection
    allTalk(
        #Filter for Talk nodes.
        filter: TalkFilterInput,
        limit: Int,
        order: SortOrder = DESC,
        page: Int,
        #Defaults to 25 when page is provided.
        perPage: Int,
        skip: Int = 0,
        sort: [SortArgument],
        sortBy: String = "date"
    ): TalkConnection
    cv(
        id: ID,
        #Will return an error if not nullable.
        nullable: Boolean = false,
        path: String
    ): Cv
    metaData: Metadata @deprecated(reason : "Use Query.metadata instead.")
    metadata: Metadata
    page(path: String!): Page
    post(
        id: ID,
        #Will return an error if not nullable.
        nullable: Boolean = false,
        path: String
    ): Post
    publication(
        id: ID,
        #Will return an error if not nullable.
        nullable: Boolean = false,
        path: String
    ): Publication
    talk(
        id: ID,
        #Will return an error if not nullable.
        nullable: Boolean = false,
        path: String
    ): Talk
}

type RemarkHeading {
    anchor: String
    depth: Int
    value: String
}

type Talk implements Node {
    belongsTo(
        filter: BelongsToFilterInput,
        limit: Int,
        order: SortOrder = DESC,
        page: Int,
        #Defaults to 25 when page is provided.
        perPage: Int,
        skip: Int = 0,
        sort: [SortArgument!],
        sortBy: String = "date"
    ): NodeBelongsTo
    content: String
    date(
        #Date format
        format: String,
        #Locale
        locale: String
    ): Date
    excerpt: String
    fileInfo: Talk_FileInfo
    headings(depth: RemarkHeadingLevels, stripTags: Boolean = true): [RemarkHeading]
    id: ID!
    page: String
    path(to: String = "default"): String
    recording: String
    slides: File
    timeToRead(
        #Words per minute
        speed: Int = 230
    ): Int
    title: String
    where: String
}

type TalkConnection implements NodeConnection {
    edges: [TalkEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type TalkEdge implements NodeConnectionEdge {
    next: Talk
    node: Talk
    previous: Talk
}

type Talk_FileInfo {
    directory: String
    extension: String
    name: String
    path: String
}

enum ImageFit {
    #Embed within both provided dimensions.
    contain
    #Crop to cover both provided dimensions.
    cover
    #Ignore the aspect ratio of the input and stretch to both provided dimensions.
    fill
    #Preserving aspect ratio, resize the image to be as large as possible while ensuring its dimensions are less than or equal to both those specified.
    inside
    #Preserving aspect ratio, resize the image to be as small as possible while ensuring its dimensions are greater than or equal to both those specified. Some of these values are based on the object-fit CSS property.
    outside
}

enum RemarkHeadingLevels {
    h1
    h2
    h3
    h4
    h5
    h6
}

enum SortOrder {
    #Sort ascending
    ASC
    #Sort descending
    DESC
}

enum TypeName {
    Cv
    Post
    Publication
    Talk
}

input BelongsToFilterInput {
    id: IDQueryOperatorInput
    path: StringQueryOperatorInput
    typeName: TypeNameQueryOperatorInput
}

input CvFilterInput {
    at: StringQueryOperatorInput
    content: StringQueryOperatorInput
    excerpt: StringQueryOperatorInput
    fileInfo: Cv_FileInfoFilterInput
    id: IDQueryOperatorInput
    order: IntQueryOperatorInput
    path: StringQueryOperatorInput
    tags: StringListQueryOperatorInput
    title: StringQueryOperatorInput
    when: StringQueryOperatorInput
}

input Cv_FileInfoFilterInput {
    directory: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    name: StringQueryOperatorInput
    path: StringQueryOperatorInput
}

input DateQueryOperatorInput {
    "Filter by property between provided values."
    between: [Date]
    "Filter by date property equal to provided date value."
    dteq: Date
    "Filter by property of (strict) equality."
    eq: Date
    "Filter by property greater than provided value."
    gt: Date
    "Filter by property greater or equal to provided value."
    gte: Date
    "Filter by property matching any of the provided values."
    in: [Date]
    "Filter by property less than provided value."
    lt: Date
    "Filter by property less than or equal to provided value."
    lte: Date
    "Filter by property not equal to provided value."
    ne: Date
    "Filter by property not matching any of the provided values."
    nin: [Date]
}

input FileQueryOperatorInput {
    "Filter by property of (strict) equality."
    eq: File
    "Filter by property matching any of the provided values."
    in: [File]
    "Filter by property not equal to provided value."
    ne: File
    "Filter by property not matching any of the provided values."
    nin: [File]
    "Filter by property matching provided regular expression."
    regex: String
}

input IDQueryOperatorInput {
    "Filter by property of (strict) equality."
    eq: ID
    "Filter by property matching any of the provided values."
    in: [ID]
    "Filter by property not equal to provided value."
    ne: ID
    "Filter by property not matching any of the provided values."
    nin: [ID]
}

input IntQueryOperatorInput {
    "Filter by property between provided values."
    between: [Int]
    "Filter by property of (strict) equality."
    eq: Int
    "Filter by property greater than provided value."
    gt: Int
    "Filter by property greater or equal to provided value."
    gte: Int
    "Filter by property matching any of the provided values."
    in: [Int]
    "Filter by property less than provided value."
    lt: Int
    "Filter by property less than or equal to provided value."
    lte: Int
    "Filter by property not equal to provided value."
    ne: Int
    "Filter by property not matching any of the provided values."
    nin: [Int]
}

input JSONQueryOperatorInput {
    "Filter by property of (strict) equality."
    eq: JSON
    "Filter by property matching any of the provided values."
    in: [JSON]
    "Filter by property not equal to provided value."
    ne: JSON
    "Filter by property not matching any of the provided values."
    nin: [JSON]
    "Filter by property matching provided regular expression."
    regex: String
}

input PageFilterInput {
    context: JSONQueryOperatorInput
    path: StringQueryOperatorInput
}

input PostFilterInput {
    content: StringQueryOperatorInput
    date: DateQueryOperatorInput
    description: StringQueryOperatorInput
    excerpt: StringQueryOperatorInput
    fileInfo: Post_FileInfoFilterInput
    id: IDQueryOperatorInput
    path: StringQueryOperatorInput
    slug: StringQueryOperatorInput
    title: StringQueryOperatorInput
    twitter: StringQueryOperatorInput
}

input Post_FileInfoFilterInput {
    directory: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    name: StringQueryOperatorInput
    path: StringQueryOperatorInput
}

input PublicationFilterInput {
    content: StringQueryOperatorInput
    date: DateQueryOperatorInput
    description: StringQueryOperatorInput
    displayDate: StringQueryOperatorInput
    excerpt: StringQueryOperatorInput
    fileInfo: Publication_FileInfoFilterInput
    id: IDQueryOperatorInput
    path: StringQueryOperatorInput
    title: StringQueryOperatorInput
    url: StringQueryOperatorInput
}

input Publication_FileInfoFilterInput {
    directory: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    name: StringQueryOperatorInput
    path: StringQueryOperatorInput
}

input SortArgument {
    by: String! = "date"
    order: SortOrder = DESC
}

input StringListQueryOperatorInput {
    "Filter by property containing the provided value."
    contains: [String]
    "Filter by property containing any of the provided values."
    containsAny: [String]
    "Filter by property containing none of the provided values."
    containsNone: [String]
    "Filter which have an array property of specified size."
    size: Int
}

input StringQueryOperatorInput {
    "Filter by property of (strict) equality."
    eq: String
    "Filter by property matching any of the provided values."
    in: [String]
    "Filter by property not equal to provided value."
    ne: String
    "Filter by property not matching any of the provided values."
    nin: [String]
    "Filter by property matching provided regular expression."
    regex: String
}

input TalkFilterInput {
    content: StringQueryOperatorInput
    date: DateQueryOperatorInput
    excerpt: StringQueryOperatorInput
    fileInfo: Talk_FileInfoFilterInput
    id: IDQueryOperatorInput
    page: StringQueryOperatorInput
    path: StringQueryOperatorInput
    recording: StringQueryOperatorInput
    slides: FileQueryOperatorInput
    title: StringQueryOperatorInput
    where: StringQueryOperatorInput
}

input Talk_FileInfoFilterInput {
    directory: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    name: StringQueryOperatorInput
    path: StringQueryOperatorInput
}

input TypeNameQueryOperatorInput {
    "Filter by property of (strict) equality."
    eq: TypeName
    "Filter by property matching any of the provided values."
    in: [TypeName]
    "Filter by property not equal to provided value."
    ne: TypeName
    "Filter by property not matching any of the provided values."
    nin: [TypeName]
}


scalar Date

scalar File

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

scalar Image